#usda 1.0
(
    "WARNING: THIS FILE IS GENERATED.  DO NOT EDIT."
)

class Joint "Joint" (
    doc = "Describes a skeleton joint."
)
{
}

class Skeleton "Skeleton" (
    doc = "Describes a skeleton."
)
{
    rel joints (
        doc = """A relationship that defines the order of all Skeleton joints 
        for pose evaluation, for a \"primary\" Skeleton, or provides re-indexing 
        of joints into an ancestor Skeleton's joints for a nested (in namespace)
        Skeleton."""
    )
    uniform matrix4d[] restTransforms (
        doc = """specifies rest transforms of each joint in 
        **joint-local space**, in the ordering imposed by *joints*."""
    )
}

class PackedJointAnimation "PackedJointAnimation" (
    doc = "Describes a vectorized collection of joint animations."
)
{
    rel joints (
        doc = """A relationship whose targets define the joints to which this
        animation's data applies, relative to the animation prim itself, so
        that it is self-contained.  This list of Joints that an animation 
        targets need not be identical to any Skeleton to which the animation
        will be applied."""
    )
    rel proxyPrim (
        doc = '''The proxyPrim relationship allows us to link a
        prim whose purpose is "render" to its (single target)
        purpose="proxy" prim.  This is entirely optional, but can be
        useful in several scenarios:
        
        - In a pipeline that does pruning (for complexity management)
        by deactivating prims composed from asset references, when we
        deactivate a purpose="render" prim, we will be able to discover
        and additionally deactivate its associated purpose="proxy" prim,
        so that preview renders reflect the pruning accurately.
        
        - DCC importers may be able to make more aggressive optimizations
        for interactive processing and display if they can discover the proxy
        for a given render prim.
        
        - With a little more work, a Hydra-based application will be able
        to map a picked proxy prim back to its render geometry for selection.

        \\note It is only valid to author the proxyPrim relationship on
        prims whose purpose is "render".'''
    )
    uniform token purpose = "default" (
        allowedTokens = ["default", "render", "proxy", "guide"]
        doc = '''Purpose is a concept we have found useful in our pipeline for 
        classifying geometry into categories that can each be independently
        included or excluded from traversals of prims on a stage, such as
        rendering or bounding-box computation traversals.  The fallback
        purpose, default indicates that a prim has "no special purpose"
        and should generally be included in all traversals.  Subtrees rooted
        at a prim with purpose render should generally only be included
        when performing a "final quality" render.  Subtrees rooted at a prim
        with purpose proxy should generally only be included when 
        performing a lightweight proxy render (such as openGL).  Finally,
        subtrees rooted at a prim with purpose guide should generally
        only be included when an interactive application has been explicitly
        asked to "show guides". 
        
        In the previous paragraph, when we say "subtrees rooted at a prim",
        we mean the most ancestral or tallest subtree that has an authored,
        non-default opinion.  If the purpose of </RootPrim> is set to 
        "render", then the effective purpose of </RootPrim/ChildPrim> will
        be "render" even if that prim has a different authored value for
        purpose.  <b>See ComputePurpose() for details of how purpose 
        inherits down namespace</b>.
        
        As demonstrated in UsdGeomBBoxCache, a traverser should be ready to 
        accept combinations of included purposes as an input.
        
        Purpose render can be useful in creating "light blocker"
        geometry for raytracing interior scenes.  Purposes render and
        proxy can be used together to partition a complicated model
        into a lightweight proxy representation for interactive use, and a
        fully realized, potentially quite heavy, representation for rendering.
        One can use UsdVariantSets to create proxy representations, but doing
        so requires that we recompose parts of the UsdStage in order to change
        to a different runtime level of detail, and that does not interact
        well with the needs of multithreaded rendering. Purpose provides us with
        a better tool for dynamic, interactive complexity management.'''
    )
    quatf[] rotations (
        doc = """Joint-local unit quaternion rotations of all affected joints, 
        in 32-bit precision.  Array length should match the size of the 
        *joints* relationship."""
    )
    half3[] scales (
        doc = """Joint-local quaternion scaling of all affected joints, in
        16 bit precision. Array length should match the size of the *joints* 
        relationship."""
    )
    float3[] translations (
        doc = """Joint-local translations of all affected joints. Array length 
        should match the size of the *joints* relationship."""
    )
    token visibility = "inherited" (
        allowedTokens = ["inherited", "invisible"]
        doc = '''Visibility is meant to be the simplest form of "pruning" 
        visibility that is supported by most DCC apps.  Visibility is 
        animatable, allowing a sub-tree of geometry to be present for some 
        segment of a shot, and absent from others; unlike the action of 
        deactivating geometry prims, invisible geometry is still 
        available for inspection, for positioning, for defining volumes, etc.'''
    )
    uniform token[] xformOpOrder (
        doc = """Encodes the sequence of transformation operations in the
        order in which they should be pushed onto a transform stack while
        visiting a UsdStage's prims in a graph traversal that will effect
        the desired positioning for this prim and its descendant prims.
        
        You should rarely, if ever, need to manipulate this attribute directly.
        It is managed by the AddXformOp(), SetResetXformStack(), and
        SetXformOpOrder(), and consulted by GetOrderedXformOps() and
        GetLocalTransformation()."""
    )
}

class "BindingAPI" (
    doc = """Provides API for authoring and extracting all the skinning-related
    data that lives in the \"geometry hierarchy\" of prims and models that want
    to be skeletally deformed.
    
    This includes binding to both skeletons and animations that drive the 
    skeleton's joints, as well as describing the mapping and weighting of
    joints to gprims and trees of geometry, and of gprims to the primary
    bound Skeleton."""
)
{
    uniform matrix4d primvars:skel:geomBindTransform (
        doc = """Encodes the transform that positions gprims in the space in
        which it is bound to a Skeleton.  If the transform is identical for a
        group of gprims that share a common ancestor, the transform may be
        authored on the ancestor, to \"inherit\" down to all the leaf gprims.
        The *geomBindTransform* is defined as moving a gprim from its own
        object space (untransformed by the gprim's own transform) out into
        Skeleton space."""
    )
    int[] primvars:skel:jointIndices (
        doc = """Indices into the *joints* relationship of the closest
        (in namespace) bound Skeleton that affect each point of a PointBased
        gprim.  The primvar can be either *constant* or *vertex* interpolation.
        In either case, this primvar's *elementSize* will determine how many
        joints apply to each vertex.  See UsdGeomPrimvar for more information
        on interpolation and elementSize."""
    )
    float[] primvars:skel:jointWeights (
        doc = """Weights for the  joints that affect each point of a PointBased
        gprim.  The primvar can be either *constant* or *vertex* interpolation.
        In either case, this primvar's *elementSize* will determine how many
        joints apply to each vertex.  The length, interpolation, and 
        elementSize of *jointWeights* must match that of *jointIndices*.
        See UsdGeomPrimvar for more information on interpolation and 
        elementSize."""
    )
    rel skel:animationSource (
        doc = """Animation source to be bound to this prim and its 
        descendants."""
    )
    rel skel:joints (
        doc = """An (optional) relationship whose targets define the list of
        joints to which jointIndices apply, relative to the gprim itself, so
        that it is self-contained. If not defined, jointIndices applies to
        the ordered list of joints defined in the bound Skeleton's *joints*
        relationship."""
    )
    rel skel:skeleton (
        doc = """Skeleton to be bound to this prim and its descendents that
        possess a mapping and weighting to the joints of the identified
        Skeleton."""
    )
}

